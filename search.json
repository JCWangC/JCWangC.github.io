[{"title":"Hello World","url":"http://jcwang.me/2021/08/11/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"CUDA版本","url":"http://jcwang.me/2020/04/08/cuda版本问题/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>原来安装<code>tensorflow2.0</code>时，对应安装的<code>cuda</code>版本为<code>10.0</code>。今天使用 <code>nvidia-smi</code>命令查看显卡状态，发现cuda版本却是<code>10.1</code>。<br>从 <code>nvcc</code>命令来看，却是<code>CUDA 10.0</code>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020040812055676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQyOTM2MA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"nvidia\"></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>CUDA 目前有两种不同的 API：Runtime API 和 Driver API，两种 API 各有其适用的范围。<br>高级API（cuda_runtime.h）是一种C++风格的接口，构建于低级API之上。<br><code>nvidia-smi</code> 的结果除了有 GPU 驱动版本型号，还有 CUDA Driver API的型号，这里是 <code>10.1</code>。<br>而nvcc的结果是对应 CUDA Runtime API<a href=\"#refer-anchor-1\"><sup>[1]</sup> </a>。</p>\n<p>在安装CUDA 时候会安装3大组件，分别是 <code>NVIDIA 驱动</code>、<code>toolkit</code> 和 <code>samples</code>。NVIDIA 驱动是用来控制 GPU 硬件，<code>toolkit</code>里面包括<code>nvcc编译器</code>等，<code>samples</code>或者说<code>SDK</code> 里面包括很多样例程序包括查询设备、带宽测试等等。上面说的 <code>CUDA Driver API</code>是依赖于<code>NVIDIA 驱动</code>安装的，而<code>CUDA Runtime API</code>是通过<code>CUDA toolkit</code>安装的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200408125144710.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQyOTM2MA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"nvidia2\"></p>\n<p>图<a href=\"#refer-anchor-2\"><sup>[2]</sup> </a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><div id=\"refer-anchor-1\"></div>\n[1] https://blog.csdn.net/ljp1919/article/details/102640512\n\n<div id=\"refer-anchor-2\"></div>\n[2] https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html\n\n","categories":["深度学习"],"tags":["驱动","英伟达"]},{"title":"vscode-git","url":"http://jcwang.me/2020/04/08/vscode-git/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>原来安装<code>tensorflow2.0</code>时，对应安装的<code>cuda</code>版本为<code>10.0</code>。今天使用 <code>nvidia-smi</code>命令查看显卡状态，发现cuda版本却是<code>10.1</code>。<br>从 <code>nvcc</code>命令来看，却是<code>CUDA 10.0</code>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020040812055676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQyOTM2MA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"nvidia\"></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>CUDA 目前有两种不同的 API：Runtime API 和 Driver API，两种 API 各有其适用的范围。<br>高级API（cuda_runtime.h）是一种C++风格的接口，构建于低级API之上。<br><code>nvidia-smi</code> 的结果除了有 GPU 驱动版本型号，还有 CUDA Driver API的型号，这里是 <code>10.1</code>。<br>而nvcc的结果是对应 CUDA Runtime API<a href=\"#refer-anchor-1\"><sup>[1]</sup> </a>。</p>\n<p>在安装CUDA 时候会安装3大组件，分别是 <code>NVIDIA 驱动</code>、<code>toolkit</code> 和 <code>samples</code>。NVIDIA 驱动是用来控制 GPU 硬件，<code>toolkit</code>里面包括<code>nvcc编译器</code>等，<code>samples</code>或者说<code>SDK</code> 里面包括很多样例程序包括查询设备、带宽测试等等。上面说的 <code>CUDA Driver API</code>是依赖于<code>NVIDIA 驱动</code>安装的，而<code>CUDA Runtime API</code>是通过<code>CUDA toolkit</code>安装的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200408125144710.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQyOTM2MA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"nvidia2\"></p>\n<p>图<a href=\"#refer-anchor-2\"><sup>[2]</sup> </a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><div id=\"refer-anchor-1\"></div>\n[1] \n\n<div id=\"refer-anchor-2\"></div>\n[2] \n","categories":["深度学习"],"tags":["驱动","英伟达"]},{"title":"pytorch安装教程","url":"http://jcwang.me/2020/04/08/pytroch安装/","content":"<p>扔掉<code>tensorflow</code>，转投<code>pytorch</code>怀抱。</p>\n<h1 id=\"Anaconda安装\"><a href=\"#Anaconda安装\" class=\"headerlink\" title=\"Anaconda安装\"></a>Anaconda安装</h1>","categories":["深度学习"],"tags":["深度学习","安装教程","pytorch"]},{"title":"《算法图解》知识体系","url":"http://jcwang.me/2020/04/03/《算2/","content":"<p><img src=\"https://s1.ax1x.com/2020/04/03/GaIWMd.jpg\" alt=\"第一章\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/03/GaIhqI.jpg\" alt=\"第二章\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/03/GaIfsA.jpg\" alt=\"第三章\"></p>\n","categories":["数据分析"],"tags":["算法","思维导图"]},{"title":"《算法图解》知识体系","url":"http://jcwang.me/2020/04/03/《算法图解》知识体系/","content":"<p><img src=\"https://s1.ax1x.com/2020/04/03/GaIWMd.jpg\" alt=\"第一章\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/03/GaIhqI.jpg\" alt=\"第二章\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/03/GaIfsA.jpg\" alt=\"第三章\"></p>\n","categories":["数据分析"],"tags":["算法","思维导图"]},{"title":"初识pandas","url":"http://jcwang.me/2020/03/26/初识pandas/","content":"<p>最近在处理一批仿真数据，简要记录下pandas基础命令。</p>\n<h1 id=\"创建、读取及存储\"><a href=\"#创建、读取及存储\" class=\"headerlink\" title=\"创建、读取及存储\"></a>创建、读取及存储</h1><h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>导入库<code>import pandas as pd</code><br>构造DataFrame最常用的方式是字典+列表</p>\n<h2 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h2><p>读取文件格式为 <code>.xls</code>，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df=pd.read_excel(<span class=\"string\">'原始文件.xlsx'</span>, sheet_name=<span class=\"string\">'Sheet1'</span>,usecols = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<p>读取文件格式为  <code>.csv</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df=pd.read_csv(<span class=\"string\">'原始文件.csv'</span>, sheet_name=<span class=\"string\">'Sheet1'</span>,usecols = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<p>engine、header、sep、names</p>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#输出excel文件</span></span><br><span class=\"line\">df.to_excel(<span class=\"string\">'输出文件.xlsx'</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出csv文件</span></span><br><span class=\"line\">df.to_csv(<span class=\"string\">'输出文件.csv'</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"快速认识数据\"><a href=\"#快速认识数据\" class=\"headerlink\" title=\"快速认识数据\"></a>快速认识数据</h1><h2 id=\"查看数据，掐头看尾\"><a href=\"#查看数据，掐头看尾\" class=\"headerlink\" title=\"查看数据，掐头看尾\"></a>查看数据，掐头看尾</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.head()<span class=\"comment\">#查看默认的前5行</span></span><br><span class=\"line\">df.head(<span class=\"number\">10</span>)<span class=\"comment\">#表示查看前10行数据</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.tail()<span class=\"comment\">#查看数据尾部的5行数据</span></span><br><span class=\"line\">df.tail(<span class=\"number\">10</span>)<span class=\"comment\">#表示查看后10行数据</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式查看\"><a href=\"#格式查看\" class=\"headerlink\" title=\"格式查看\"></a>格式查看</h2><p>df.info()帮助我们一步摸清各列数据的类型，以及缺失情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.info()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"统计信息概览\"><a href=\"#统计信息概览\" class=\"headerlink\" title=\"统计信息概览\"></a>统计信息概览</h2><p>快速计算数值型数据的关键统计指标，像平均数、中位数、标准差等等。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.describe()</span><br></pre></td></tr></table></figure>\n<p>我们本来有5列数据，为什么返回结果只有两列？那是因为这个操作只针对数值型的列。其中count是统计每一列的有多少个非空数值，mean、std、min、max对应的分别是该列的均值、标准差、最小值和最大值，25%、50%、75%对应的则是分位数。</p>\n<h1 id=\"列的基本处理方式\"><a href=\"#列的基本处理方式\" class=\"headerlink\" title=\"列的基本处理方式\"></a>列的基本处理方式</h1><p>这里，我们采用SQL四大法宝的逻辑来简单梳理针对列的基本处理方式——增、删、选、改。</p>\n<p>温馨提示：使用Pandas时，尽量避免用行或者EXCEL操作单元格的思维来处理数据，要逐渐养成一种列向思维，每一列是同宗同源，处理起来是嗖嗖的快。</p>\n<h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><p>增加一列，用df[‘新列名’] = 新列值的形式，在原数据基础上赋值即可：</p>\n<h2 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h2><p>我们用drop函数制定删除对应的列，axis = 1表示针对列的操作，inplace为True，则直接在源数据上进行修改，否则源数据会保持原样。</p>\n<h2 id=\"选\"><a href=\"#选\" class=\"headerlink\" title=\"选\"></a>选</h2><p>想要选取某一列怎么办？df[‘列名’]即可：</p>\n<p>选取多列呢？需要用列表来传递：df[[‘第一列’,’第二列’,’第三列’..]]</p>\n<h2 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h2><p>好事多磨，复杂的针对特定条件和行列的筛选、修改，放在后面结合案例细讲，这里只讲一下最简单的更改：df[‘旧列名’] =  某个值或者某列值，就完成了对原列数值的修改。</p>\n<h1 id=\"常用数据类型及操作\"><a href=\"#常用数据类型及操作\" class=\"headerlink\" title=\"常用数据类型及操作\"></a>常用数据类型及操作</h1><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>字符串类型是最常用的格式之一了，Pandas中字符串的操作和原生字符串操作几乎一毛一样，唯一不同的是需要在操作前加上”.str”。</p>\n<p>小Z温馨提示：我们最初用df2.info()查看数据类型时，非数值型的列都返回的是object格式，和str类型深层机制上的区别就不展开了，在常规实际应用中，我们可以先理解为object对应的就是str格式，int64对应的就是int格式，float64对应的就是float格式即可。</p>\n<p>在案例数据中，我们发现来源明细那一列，可能是系统导出的历史遗留问题，每一个字符串前面都有一个“-”符号，又丑又无用，所以把他给拿掉：</p>\n<p>一般来说清洗之后的列是要替换掉原来列的：</p>\n<h2 id=\"数值型\"><a href=\"#数值型\" class=\"headerlink\" title=\"数值型\"></a>数值型</h2><p>数值型数据，常见的操作是计算，分为与单个值的运算，长度相等列的运算。</p>\n<p>以案例数据为例，源数据访客数我们是知道的，现在想把所有渠道的访客都加上10000，怎么操作呢？</p>\n<p>只需要选中访客数所在列，然后加上10000即可，pandas自动将10000和每一行数值相加，针对单个值的其他运算（减乘除）也是如此。</p>\n<h2 id=\"时间类型\"><a href=\"#时间类型\" class=\"headerlink\" title=\"时间类型\"></a>时间类型</h2>","categories":["数据分析"],"tags":[]},{"title":"hexo+githubpages搭建个人网页","url":"http://jcwang.me/2020/03/01/hexo-githubpages搭建个人网页/","content":"<p>Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p>\n<p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>\n<p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<p>安装好后，用<code>git --version</code> 来查看一下版本</p>\n<h1 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h1><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>\n<p>windows：nodejs选择LTS版本就行了。</p>\n<p>linux：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n<p>安装完后，打开命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>检查一下有没有安装成功</p>\n<p>windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><p>前面git和nodejs安装好后，就可以安装hexo了，自己可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p>\n<p>输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>依旧用hexo -v查看一下版本</p>\n<p>至此就全部安装完了。</p>\n<p>接下来初始化一下hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog&#x2F;&#x2F;文件夹名</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myblog &#x2F;&#x2F;进入这个myblog文件夹</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>新建完成后，指定文件夹目录下有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules: 依赖包</span><br><span class=\"line\">public：存放生成的页面</span><br><span class=\"line\">scaffolds：生成文章的一些模板</span><br><span class=\"line\">source：用来存放文章</span><br><span class=\"line\">themes：主题</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">** _config.yml: 博客的配置文件**</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>打开hexo的服务，在浏览器输入<code>localhost:4000</code>就可以看到自己生成的博客了。</p>\n<p>使用ctrl+c可以把服务关掉。</p>\n<h1 id=\"GitHub创建个人仓库\"><a href=\"#GitHub创建个人仓库\" class=\"headerlink\" title=\"GitHub创建个人仓库\"></a>GitHub创建个人仓库</h1><p>登录GitHub账户，在GitHub.com中看到一个New repository，新建仓库</p>\n<p>创建一个和自己用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是自己注册GitHub的用户名。我这里是已经建过了。</p>\n<p>点击create repository。</p>\n<h1 id=\"生成SSH添加到GitHub\"><a href=\"#生成SSH添加到GitHub\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h1><p>回到自己的git bash中，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;myname&quot;</span><br><span class=\"line\">git config --global user.email &quot;myemail&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这里的myname输入自己的GitHub用户名，myemail输入自己GitHub的邮箱。这样GitHub才能知道自己是不是对应它的账户。</p>\n<p>可以用以下两条，检查一下自己有没有输对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n\n<p>然后创建SSH,一路回车</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;myemail&quot;</span><br></pre></td></tr></table></figure>\n<p>这个时候它会告诉自己已经生成了.ssh的文件夹。在自己的电脑中找到这个文件夹。</p>\n<p><code>ssh</code>，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是自己这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当自己链接GitHub自己的账户时，它就会根据公钥匹配自己的私钥，当能够相互匹配时，才能够顺利的通过git上传自己的文件到GitHub上。</p>\n<p>而后在GitHub的<code>setting</code>中，找到<code>SSH keys</code>的设置选项，点击<code>New SSH key</code><br>把自己的<code>id_rsa.pub</code>里面的信息复制进去。</p>\n<p>在gitbash中，查看是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<h1 id=\"将hexo部署到GitHub\"><a href=\"#将hexo部署到GitHub\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h1><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>mygithubName就是自己的GitHub账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repo: https:&#x2F;&#x2F;github.com&#x2F;mygithubName&#x2F;mygithubName.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n\n<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样自己才能用命令部署到GitHub。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>其中 <code>hexo clean</code>清除了自己之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用<code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意<code>deploy</code>时可能要自己输入<code>username</code>和<code>password</code>。</p>\n<p>得到下图就说明部署成功了，过一会儿就可以在<a href=\"http://myname.github.io\" target=\"_blank\" rel=\"noopener\">http://myname.github.io</a> 这个网站看到自己的博客了！！</p>\n<h1 id=\"设置个人域名\"><a href=\"#设置个人域名\" class=\"headerlink\" title=\"设置个人域名\"></a>设置个人域名</h1><p>现在自己的个人网站的地址是 githubname.github.io，如果觉得这个网址逼格不太够，这就需要自己设置个人域名了。但是需要花钱。</p>\n<p>登录GitHub，进入之前创建的仓库，点击<code>settings</code>，设置<code>Custom domain</code>，输入自己的域名<code>jcwang.me</code></p>\n<p>然后在自己的博客文件source中创建一个名为CNAME文件，不要后缀。写上自己的域名。</p>\n<p>最后，在<code>gitbash</code>中，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>过不了多久，再打开自己的浏览器，输入自己自己的域名，就可以看到搭建的网站啦！</p>\n<p>接下来自己就可以正式开始写文章了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new newpapername</span><br></pre></td></tr></table></figure>\n<p>然后在<code>source/_post</code>中打开markdown文件，就可以开始编辑了。当自己写完的时候，再</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>就可以看到更新了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;Hello, World!&quot;</span><br></pre></td></tr></table></figure>\n\n","categories":["网页"],"tags":["hexo","网页"]},{"title":"生活随拍","url":"http://jcwang.me/2020/02/12/生活随拍/","content":"<p>摄影采风。</p>\n<p><img src=\"/2020/02/12/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%8B%8D/plane.jpg\" alt=\"图片解释\"></p>\n","categories":["摄影"],"tags":[]},{"title":"numpy常用命令","url":"http://jcwang.me/2020/02/01/numpy常用命令/","content":"<p>numpy指令集合。</p>\n","categories":["数据分析"],"tags":[]},{"title":"中文test","url":"http://jcwang.me/2020/02/01/中文test/","content":"<h1 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h1><h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p><em>斜体</em><br><img src=\"/2020/02/01/%E4%B8%AD%E6%96%87test/test.jpg\" alt=\"图片解释\"><br><em>斜体</em><br><strong><em>斜体加粗</em></strong> </p>\n<cblockquote> \n\n<p>Lorem ipsum dolor坐下来，献身奉献。Pellentesque hendrerit lacus ut purus iaculis feugiat。Sed nec tempor elit，quis aliquam neque。在欧洲，Curabitur sed diam eget dolor fermentum semper。</p>\n<endblockquote>\n\n\n\n<p><del>删除线</del></p>\n<blockquote>\n<p>引用1</p>\n<blockquote>\n<p>引用2</p>\n<blockquote>\n<p>引用3<br>分割线</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<p>第二条分割线</p>\n<hr>\n<p>1.把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true（如果没有就不用管了）<br>句内测<code>code</code>试加代码 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\">print(<span class=\"string\">\"Hello, World!\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fun()&#123;</span><br><span class=\"line\">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun();</span><br></pre></td></tr></table></figure>\n\n</endblockquote></cblockquote>","categories":[],"tags":["test"]},{"title":"about","url":"http://jcwang.me/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://jcwang.me/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://jcwang.me/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://jcwang.me/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://jcwang.me/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://jcwang.me/tag/index.html","content":"","categories":[],"tags":[]}]